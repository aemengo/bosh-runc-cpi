// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateVMOpts struct {
	StemcellID           string   `protobuf:"bytes,1,opt,name=stemcellID,proto3" json:"stemcellID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVMOpts) Reset()         { *m = CreateVMOpts{} }
func (m *CreateVMOpts) String() string { return proto.CompactTextString(m) }
func (*CreateVMOpts) ProtoMessage()    {}
func (*CreateVMOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{0}
}
func (m *CreateVMOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVMOpts.Unmarshal(m, b)
}
func (m *CreateVMOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVMOpts.Marshal(b, m, deterministic)
}
func (dst *CreateVMOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVMOpts.Merge(dst, src)
}
func (m *CreateVMOpts) XXX_Size() int {
	return xxx_messageInfo_CreateVMOpts.Size(m)
}
func (m *CreateVMOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVMOpts.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVMOpts proto.InternalMessageInfo

func (m *CreateVMOpts) GetStemcellID() string {
	if m != nil {
		return m.StemcellID
	}
	return ""
}

type DataParcel struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataParcel) Reset()         { *m = DataParcel{} }
func (m *DataParcel) String() string { return proto.CompactTextString(m) }
func (*DataParcel) ProtoMessage()    {}
func (*DataParcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{1}
}
func (m *DataParcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataParcel.Unmarshal(m, b)
}
func (m *DataParcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataParcel.Marshal(b, m, deterministic)
}
func (dst *DataParcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataParcel.Merge(dst, src)
}
func (m *DataParcel) XXX_Size() int {
	return xxx_messageInfo_DataParcel.Size(m)
}
func (m *DataParcel) XXX_DiscardUnknown() {
	xxx_messageInfo_DataParcel.DiscardUnknown(m)
}

var xxx_messageInfo_DataParcel proto.InternalMessageInfo

func (m *DataParcel) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TruthParcel struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TruthParcel) Reset()         { *m = TruthParcel{} }
func (m *TruthParcel) String() string { return proto.CompactTextString(m) }
func (*TruthParcel) ProtoMessage()    {}
func (*TruthParcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{2}
}
func (m *TruthParcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TruthParcel.Unmarshal(m, b)
}
func (m *TruthParcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TruthParcel.Marshal(b, m, deterministic)
}
func (dst *TruthParcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TruthParcel.Merge(dst, src)
}
func (m *TruthParcel) XXX_Size() int {
	return xxx_messageInfo_TruthParcel.Size(m)
}
func (m *TruthParcel) XXX_DiscardUnknown() {
	xxx_messageInfo_TruthParcel.DiscardUnknown(m)
}

var xxx_messageInfo_TruthParcel proto.InternalMessageInfo

func (m *TruthParcel) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ValueParcel struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValueParcel) Reset()         { *m = ValueParcel{} }
func (m *ValueParcel) String() string { return proto.CompactTextString(m) }
func (*ValueParcel) ProtoMessage()    {}
func (*ValueParcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{3}
}
func (m *ValueParcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValueParcel.Unmarshal(m, b)
}
func (m *ValueParcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValueParcel.Marshal(b, m, deterministic)
}
func (dst *ValueParcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueParcel.Merge(dst, src)
}
func (m *ValueParcel) XXX_Size() int {
	return xxx_messageInfo_ValueParcel.Size(m)
}
func (m *ValueParcel) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueParcel.DiscardUnknown(m)
}

var xxx_messageInfo_ValueParcel proto.InternalMessageInfo

func (m *ValueParcel) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type IDParcel struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDParcel) Reset()         { *m = IDParcel{} }
func (m *IDParcel) String() string { return proto.CompactTextString(m) }
func (*IDParcel) ProtoMessage()    {}
func (*IDParcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{4}
}
func (m *IDParcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDParcel.Unmarshal(m, b)
}
func (m *IDParcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDParcel.Marshal(b, m, deterministic)
}
func (dst *IDParcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDParcel.Merge(dst, src)
}
func (m *IDParcel) XXX_Size() int {
	return xxx_messageInfo_IDParcel.Size(m)
}
func (m *IDParcel) XXX_DiscardUnknown() {
	xxx_messageInfo_IDParcel.DiscardUnknown(m)
}

var xxx_messageInfo_IDParcel proto.InternalMessageInfo

func (m *IDParcel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_770af1f3810e6977, []int{5}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateVMOpts)(nil), "pb.CreateVMOpts")
	proto.RegisterType((*DataParcel)(nil), "pb.DataParcel")
	proto.RegisterType((*TruthParcel)(nil), "pb.TruthParcel")
	proto.RegisterType((*ValueParcel)(nil), "pb.ValueParcel")
	proto.RegisterType((*IDParcel)(nil), "pb.IDParcel")
	proto.RegisterType((*Void)(nil), "pb.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CPIDClient is the client API for CPID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CPIDClient interface {
	CreateStemcell(ctx context.Context, opts ...grpc.CallOption) (CPID_CreateStemcellClient, error)
	DeleteStemcell(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error)
	DeleteDisk(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error)
	CreateDisk(ctx context.Context, in *ValueParcel, opts ...grpc.CallOption) (*IDParcel, error)
	HasDisk(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*TruthParcel, error)
	CreateVM(ctx context.Context, in *CreateVMOpts, opts ...grpc.CallOption) (*IDParcel, error)
	DeleteVM(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error)
	HasVM(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*TruthParcel, error)
}

type cPIDClient struct {
	cc *grpc.ClientConn
}

func NewCPIDClient(cc *grpc.ClientConn) CPIDClient {
	return &cPIDClient{cc}
}

func (c *cPIDClient) CreateStemcell(ctx context.Context, opts ...grpc.CallOption) (CPID_CreateStemcellClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CPID_serviceDesc.Streams[0], "/pb.CPID/CreateStemcell", opts...)
	if err != nil {
		return nil, err
	}
	x := &cPIDCreateStemcellClient{stream}
	return x, nil
}

type CPID_CreateStemcellClient interface {
	Send(*DataParcel) error
	CloseAndRecv() (*IDParcel, error)
	grpc.ClientStream
}

type cPIDCreateStemcellClient struct {
	grpc.ClientStream
}

func (x *cPIDCreateStemcellClient) Send(m *DataParcel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cPIDCreateStemcellClient) CloseAndRecv() (*IDParcel, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IDParcel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cPIDClient) DeleteStemcell(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pb.CPID/DeleteStemcell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) DeleteDisk(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pb.CPID/DeleteDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) CreateDisk(ctx context.Context, in *ValueParcel, opts ...grpc.CallOption) (*IDParcel, error) {
	out := new(IDParcel)
	err := c.cc.Invoke(ctx, "/pb.CPID/CreateDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) HasDisk(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*TruthParcel, error) {
	out := new(TruthParcel)
	err := c.cc.Invoke(ctx, "/pb.CPID/HasDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) CreateVM(ctx context.Context, in *CreateVMOpts, opts ...grpc.CallOption) (*IDParcel, error) {
	out := new(IDParcel)
	err := c.cc.Invoke(ctx, "/pb.CPID/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) DeleteVM(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pb.CPID/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPIDClient) HasVM(ctx context.Context, in *IDParcel, opts ...grpc.CallOption) (*TruthParcel, error) {
	out := new(TruthParcel)
	err := c.cc.Invoke(ctx, "/pb.CPID/HasVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPIDServer is the server API for CPID service.
type CPIDServer interface {
	CreateStemcell(CPID_CreateStemcellServer) error
	DeleteStemcell(context.Context, *IDParcel) (*Void, error)
	DeleteDisk(context.Context, *IDParcel) (*Void, error)
	CreateDisk(context.Context, *ValueParcel) (*IDParcel, error)
	HasDisk(context.Context, *IDParcel) (*TruthParcel, error)
	CreateVM(context.Context, *CreateVMOpts) (*IDParcel, error)
	DeleteVM(context.Context, *IDParcel) (*Void, error)
	HasVM(context.Context, *IDParcel) (*TruthParcel, error)
}

func RegisterCPIDServer(s *grpc.Server, srv CPIDServer) {
	s.RegisterService(&_CPID_serviceDesc, srv)
}

func _CPID_CreateStemcell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CPIDServer).CreateStemcell(&cPIDCreateStemcellServer{stream})
}

type CPID_CreateStemcellServer interface {
	SendAndClose(*IDParcel) error
	Recv() (*DataParcel, error)
	grpc.ServerStream
}

type cPIDCreateStemcellServer struct {
	grpc.ServerStream
}

func (x *cPIDCreateStemcellServer) SendAndClose(m *IDParcel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cPIDCreateStemcellServer) Recv() (*DataParcel, error) {
	m := new(DataParcel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CPID_DeleteStemcell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).DeleteStemcell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/DeleteStemcell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).DeleteStemcell(ctx, req.(*IDParcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_DeleteDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).DeleteDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/DeleteDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).DeleteDisk(ctx, req.(*IDParcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_CreateDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).CreateDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/CreateDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).CreateDisk(ctx, req.(*ValueParcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_HasDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).HasDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/HasDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).HasDisk(ctx, req.(*IDParcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).CreateVM(ctx, req.(*CreateVMOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).DeleteVM(ctx, req.(*IDParcel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPID_HasVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDParcel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPIDServer).HasVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CPID/HasVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPIDServer).HasVM(ctx, req.(*IDParcel))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CPID",
	HandlerType: (*CPIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteStemcell",
			Handler:    _CPID_DeleteStemcell_Handler,
		},
		{
			MethodName: "DeleteDisk",
			Handler:    _CPID_DeleteDisk_Handler,
		},
		{
			MethodName: "CreateDisk",
			Handler:    _CPID_CreateDisk_Handler,
		},
		{
			MethodName: "HasDisk",
			Handler:    _CPID_HasDisk_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _CPID_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _CPID_DeleteVM_Handler,
		},
		{
			MethodName: "HasVM",
			Handler:    _CPID_HasVM_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStemcell",
			Handler:       _CPID_CreateStemcell_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messages.proto",
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor_messages_770af1f3810e6977) }

var fileDescriptor_messages_770af1f3810e6977 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0xe9, 0x58, 0xf7, 0xef, 0xbe, 0x7f, 0xa9, 0x12, 0xbc, 0x90, 0x5d, 0xc8, 0xa8, 0x22,
	0x45, 0xa1, 0x88, 0x3e, 0xc2, 0x72, 0xb1, 0x5e, 0x0c, 0xc7, 0x94, 0xde, 0xa7, 0xf3, 0xa0, 0xc3,
	0x8c, 0x96, 0x26, 0xf3, 0x55, 0x7d, 0x1d, 0x49, 0x62, 0x59, 0x36, 0xbb, 0xbb, 0x9c, 0x93, 0xdf,
	0x39, 0xdf, 0x77, 0x72, 0x82, 0x64, 0x4b, 0x4a, 0x89, 0x77, 0x52, 0x79, 0xd3, 0xd6, 0xba, 0x66,
	0x83, 0xa6, 0x4a, 0x73, 0xc4, 0xb3, 0x96, 0x84, 0xa6, 0x72, 0xf1, 0xdc, 0x68, 0xc5, 0xae, 0x00,
	0xa5, 0x69, 0xbb, 0x26, 0x29, 0x0b, 0x7e, 0x19, 0x4c, 0x83, 0x6c, 0xbc, 0xf2, 0x32, 0x69, 0x0a,
	0x70, 0xa1, 0xc5, 0x52, 0xb4, 0x6b, 0x92, 0xec, 0x02, 0xe1, 0x97, 0x90, 0x3b, 0xb2, 0x60, 0xbc,
	0x72, 0x41, 0x7a, 0x8d, 0xff, 0xaf, 0xed, 0x4e, 0x7f, 0xf4, 0x41, 0x91, 0x07, 0x95, 0xe6, 0xd0,
	0x07, 0x85, 0x1d, 0x34, 0x45, 0x54, 0xf0, 0x3e, 0x62, 0xdc, 0x11, 0x23, 0x0c, 0xcb, 0x7a, 0xf3,
	0xf6, 0xf8, 0x3d, 0xc0, 0x70, 0xb6, 0x2c, 0x38, 0x7b, 0x40, 0xe2, 0x06, 0x7a, 0xf9, 0x35, 0xcd,
	0x92, 0xbc, 0xa9, 0xf2, 0xbd, 0xe9, 0x49, 0x6c, 0xe2, 0xae, 0x6d, 0x16, 0xb0, 0x0c, 0x09, 0x27,
	0x49, 0x5e, 0xc5, 0x01, 0x31, 0x89, 0x4c, 0x64, 0x44, 0xd8, 0x0d, 0xe0, 0x48, 0xbe, 0x51, 0x9f,
	0x27, 0xa9, 0x7b, 0xc0, 0x39, 0xb0, 0xd4, 0x99, 0xcd, 0xef, 0x27, 0x3d, 0x94, 0x67, 0x19, 0xfe,
	0xcd, 0x85, 0xea, 0xe9, 0x67, 0xeb, 0xfc, 0x67, 0xbc, 0x43, 0xd4, 0x6d, 0x8a, 0x9d, 0x9b, 0x4b,
	0x7f, 0x6f, 0x47, 0x5d, 0x53, 0x44, 0xce, 0x68, 0xb9, 0x38, 0x69, 0xf3, 0x16, 0xe1, 0x5c, 0xa8,
	0x3f, 0xc0, 0xb1, 0x6e, 0x35, 0xb2, 0x9f, 0xe5, 0xe9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x9f,
	0x39, 0xe3, 0x3e, 0x02, 0x00, 0x00,
}
